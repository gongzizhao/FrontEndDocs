给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。

示例 1:

输入: [1,1,2,3,3,4,4,8,8]
输出: 2
示例 2:

输入: [3,3,7,7,10,11,11]
输出: 10
注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。

var singleNonDuplicate = function(nums) {
    
    var left=0,right=nums.length
    let temp
    while(left<=right){
        let mid=(left+right)/2
        if(nums[mid]===nums[mid+1]){
            temp=mid
        }else if(nums[mid]===nums[mid-1]){
            temp=mid-1
        }else return nums[mid]

        if(temp%2===1){
            right=mid-1
        }else {
            left=mid+1
        }
    }
}

var singleNonDuplicate1 = function(nums){
    for(i of nums){
        if(nums.indexOf(i)===nums.lastIndexOf(i)){
            return i
        }
    }
}
