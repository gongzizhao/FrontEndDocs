一辆汽车加满油后可行驶n公里。旅途中有若干个加油站。设计一个有效算法，指出应在哪些加油站停靠加油，使沿途加油次数最少。对于给定的n(n <= 5000)和k(k <= 1000)个加油站位置，编程计算最少加油次数。并证明算法能产生一个最优解。
要求：

输入：第一行有2个正整数n和k，表示汽车加满油后可行驶n公里，且旅途中有k个加油站。接下来的1 行中，有k+1 个整数，表示第k个加油站与第k-1 个加油站之间的距离。第0 个加油站表示出发地，汽车已加满油。第k+1 个加油站表示目的地。

输出：输出编程计算出的最少加油次数。如果无法到达目的地，则输出”NoSolution”。

function greedy(n, k, arr){  // n:加满可以行驶的公里数; k:加油站数量; arr:每个加油站之间的距离数组
	if (n == 0 || k == 0 || arr.length == 0 || arr[0] > n) {
		return "No Solution!";  // arr[0] > n ：如果第一个加油站距离太远，也无法到达
	};
	let res = 0, distance = 0;  // res：加油次数；distance：已行驶距离
	for(let i = 0; i <= k; i++){
		distance += arr[i];
		if (distance > n) {  // 已行驶距离 > 加满可以行驶的公里数
			if(arr[i] > n){  // 如果目前加油站和前一个加油站的距离 > 加满可以行驶的公里数，则无法到达
				return "No Solution!";
			};
			// 可以在上一个加油站加油，行驶到目前的加油站i：
			distance = arr[i];
			res++;  // 加油次数+1
		}
	}
	return res;
}
let arr = [1,2,3,4,5,1,6,6];
console.log(greedy(7,7,arr))  // 4
